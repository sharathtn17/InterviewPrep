package Interview;

import java.util.HashMap;

public class BalancedParantisis {
	
	static HashMap<Character,Character> map=new HashMap<Character,Character>(){{
		 put("{","}");
		 put("(",")");
		 put("[","]");
		
	}};
	
static class stack{
	
	int top=-1;
	int max=999;
	char items[] = new char[100];
	
	void push(char ele)
	{
		if(top==max)
		{
			
			System.out.println("Stack full"); 
		}else{
			
			items[++top]=ele;
		}
		
	}
	
	char pop()
	{
		if(top==-1)
		{
			System.out.println("Stack Empty"); 
			return 0;
		}else
		{
			return items[top--];
			
		}
		
	}
	 boolean isEmpty()  
     { 
         return (top == -1) ? true : false; 
     } 
	
	
	
	
}
	
	public static boolean matchingParentis(char pop,char expect)
	{
		if(map.get(pop) == null)
		{
			return false;
		}else if(map.get(pop)==expect)
		{
			return true;
		}
				
		return false;
	}

	public static void main(String args[])
	{
		char exp[] = {'{','(',')','}','[',']'}; 
        if (areParenthesisBalanced(exp)) 
          System.out.println("Balanced "); 
        else
          System.out.println("Not Balanced ");   
		
	}

	private static boolean areParenthesisBalanced(char[] exp) {
		/* Declare an empty character stack */
	       stack st=new stack(); 
	       
	       /* Traverse the given expression to  
	          check matching parenthesis */
	       for(int i=0;i<exp.length;i++) 
	       { 
	            
	          /*If the exp[i] is a starting  
	            parenthesis then push it*/
	          if (exp[i] == '{' || exp[i] == '(' || exp[i] == '[') 
	            st.push(exp[i]); 
	       
	          /* If exp[i] is an ending parenthesis  
	             then pop from stack and check if the  
	             popped parenthesis is a matching pair*/
	          if (exp[i] == '}' || exp[i] == ')' || exp[i] == ']') 
	          { 
	                   
	              /* If we see an ending parenthesis without  
	                 a pair then return false*/
	             if (st.isEmpty()) 
	               { 
	                   return false; 
	               }  
	       
	             /* Pop the top element from stack, if  
	                it is not a pair parenthesis of character  
	                then there is a mismatch. This happens for  
	                expressions like {(}) */
	             else if ( !matchingParentis(st.pop(), exp[i]) ) 
	               { 
	                   return false; 
	               } 
	          } 
	            
		return false;
	}
}
