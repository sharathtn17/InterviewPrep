package dataStructure;

public class LinkedListImp {
     Node head;
	
	public  void addToList(int element)
	{   
		
		if(head==null)
		{ Node newnode=new Node(element);
			//newnode.data=element;
		    head=newnode;
			newnode.next=null;
			System.out.println("Head");
		}else{
			Node temp=head;
		while(temp.next!=null)
		{   
			temp=temp.next;
		}
		Node newnode=new Node(element);
		temp.next=newnode;
		newnode.data=element;
		newnode.next=null;
	}
	}
	
	public void traverseAndPrint()
	{
		Node temp=head;
		
		if(head==null)
		{
			System.out.println("List Is EMPTY");
		}else{
			while(temp!=null)
			{
			System.out.print(temp.data+",");
			temp=temp.next;
			}
		}
		System.out.println();
	}
	
	public Node head()
	{
		return head;
	}
	public void add(int index, int ele)
	{
		int i=0;
		Node temp=head;
		Node nextnode=temp.next;
		if(head==null)
		{
			System.out.println("Stack Empty");
			
		}else
		{
			if(index==0)
			{
				Node newnode=new Node(ele);
				newnode.next=head;
				head=newnode;
			}else{
			while(temp.next!=null)
			{   if(i<=index)
			{
				i++;
			   System.out.println(i+"i++");
		       if(i==index)
		       {   Node newnode=new Node(ele);
		    	   temp.next=newnode;
		    	   newnode.next=nextnode;
		       }
		     temp= temp.next;
	     	}
		}
		}
		}
	}
	public Node reverse(Node node)
	{    
		 Node temp=node;
		 
		if(temp.next==null)
		{   head=temp;
			return temp;
		}
		
		Node n2=reverse(temp.next);
		n2.next=temp;
		n2=n2.next;
		return n2; //reverse(temp.next).next=temp;
	}
	
	public void removeLast()
	{
	   Node temp=head;
	   Node prev=null;
		if(head==null)
		{
			System.out.println("List Is Empty");
		}else
		{
			while(temp.next!=null)
			{
				prev=temp;
				temp=temp.next;
			}
			
			prev.next=null;
			System.out.println(temp.data+"Removed");
		}
		
	}
	

	public void remove()
	{
	   Node temp=head;
	   Node prev=null;
		if(head==null)
		{
			System.out.println("List Is Empty");
		}else
		{
			head=temp.next;
			temp.next=null;		
			System.out.println(temp.data+"Removed");
		}
		
	}
	
	
	static  class Node
	{
		int data;
		Node next;
		
		public Node(int element)
		{
		//	Node newnode=new Node(element);
			this.data=element;
			
		}
		
		
	}
	 
	 
}
